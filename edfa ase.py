import numpy as np
import matplotlib.pyplot as plt

# --- Physical Constants ---
h = 6.626e-34  # Planck's constant (J·s)
c = 3.0e8      # Speed of light in vacuum (m/s)

# --- EDFA Parameters ---
# You can modify these parameters to see how they affect the ASE spectrum.
L = 5.0               # Length of the erbium-doped fiber (m)
N_total = 1.0e25       # Total Erbium ion concentration (ions/m³)
avg_inversion = 0.7    # Average population inversion (unitless, from 0 to 1)
                       # This value represents the pumping level.
                       # High value (~0.7-0.9) -> High pump power
                       # Low value (~0.4-0.6) -> Low pump power

# --- Wavelength Configuration ---
# C-band wavelength range for the simulation
wavelengths_nm = np.linspace(1520, 1575, 550)
wavelengths = wavelengths_nm * 1e-9  # Convert to meters
frequencies = c / wavelengths       # Convert to frequency (Hz)

# --- Erbium Cross-Section Model ---
# These functions model the absorption and emission spectra of Erbium ions
# in a silica fiber. We use a combination of Gaussian functions to create a
# realistic spectral shape.

def absorption_cross_section(wl):
    """
    Calculates the absorption cross-section (sigma_a) at given wavelengths.
    Approximates the typical peak around 1530 nm.
    """
    peak_1 = 6.5e-25 * np.exp(-((wl - 1530e-9) / 8e-9)**2)
    return peak_1

def emission_cross_section(wl):
    """
    Calculates the emission cross-section (sigma_e) at given wavelengths.
    Approximates the typical peaks around 1532 nm and a shoulder in the
    longer wavelength region of the C-band.
    """
    peak_1 = 6.0e-25 * np.exp(-((wl - 1532e-9) / 9e-9)**2)
    peak_2 = 3.5e-25 * np.exp(-((wl - 1555e-9) / 18e-9)**2)
    return peak_1 + peak_2

# Calculate cross-section values over the wavelength range
sigma_a = absorption_cross_section(wavelengths)
sigma_e = emission_cross_section(wavelengths)


# --- Core ASE Calculation ---

# 1. Calculate the gain coefficient spectrum (gamma)
# This determines how much light is amplified or absorbed at each wavelength.
# It depends on the cross-sections and the population inversion.
n2 = avg_inversion
n1 = 1 - n2
gamma = N_total * (sigma_e * n2 - sigma_a * n1)

# 2. Calculate the total gain in linear scale
# This is the total amplification factor after light travels through the fiber.
# We use np.clip to prevent extremely large values from floating point errors.
G = np.exp(np.clip(gamma * L, -35, 35))

# 3. Calculate the spontaneous emission factor (n_sp)
# This factor quantifies the amount of spontaneous emission noise added by the
# amplifier. It is higher where emission is strong relative to net gain.
denominator = (sigma_e * n2 - sigma_a * n1)
# Add a very small number to avoid division by zero where gain is zero.
n_sp = (sigma_e * n2) / (denominator + 1e-30)
# The minimum value for n_sp is 1, which occurs in a perfect, lossless amplifier.
n_sp[denominator <= 0] = 1

# 4. Calculate ASE Power Spectral Density (P_ase) in W/Hz
# This is the fundamental formula for ASE power generated by the amplifier.
# The '2' accounts for the two polarization states of light in the fiber.
P_ase_psd = 2 * n_sp * h * frequencies * (G - 1)

# 5. Convert ASE power to dBm for plotting
# Optical Spectrum Analyzers (OSAs) measure power in discrete bandwidth bins.
# We simulate this by calculating the power within the wavelength step of our grid.
delta_lambda = wavelengths[1] - wavelengths[0]
# Calculate the equivalent frequency bandwidth for each wavelength step
resolution_bandwidth_hz = (c / wavelengths**2) * delta_lambda
# Power in Watts within each bin
P_ase_watts = P_ase_psd * resolution_bandwidth_hz
# Convert power from Watts to dBm (decibels relative to 1 milliwatt)
# We add a small floor value to avoid log(0) errors where power is negligible.
P_ase_dBm = 10 * np.log10(P_ase_watts / 1e-3 + 1e-12)


# --- Plotting Results ---
plt.figure(figsize=(10, 7))
plt.style.use('seaborn-v0_8-whitegrid')

# Plot ASE Spectrum
plot_label = f'L={L}m, Inversion={avg_inversion*100:.0f}%'
plt.plot(wavelengths_nm, P_ase_dBm, 'g', linewidth=2.5, label=plot_label)

plt.title('Simulated EDFA ASE Spectrum', fontsize=16)
plt.xlabel('Wavelength (nm)', fontsize=12)
plt.ylabel('ASE Power (dBm)', fontsize=12)
# Set y-axis limits to provide a good view of the spectrum shape
plt.ylim(np.max(P_ase_dBm) - 45, np.max(P_ase_dBm) + 5)
plt.legend(fontsize=10)
plt.tick_params(axis='both', which='major', labelsize=10)

plt.tight_layout()
plt.show()

